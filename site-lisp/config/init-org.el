;;Org mode

;;org TODO keywords
(setq org-todo-keywords '((sequence "TODO(t)" "|" "DONE(d)" "CLOSED(c)")
                          ))
(add-hook 'message-mode-hook 'turn-on-orgstruct)
(add-hook 'message-mode-hook 'turn-on-orgstruct++)
;;---------Org-mode export html with mathjax-----
;(setq org-html-mathjax-options '((path "http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML")))
;;or use in a sigle file with org-mode  #+HTML_MATHJAX: align:"left" mathml:t path:""
;;set the C-c . of the command org-time-stamp in a consistent time format
;;(setq-default org-display-custom-times 't)
;;(setq org-time-stamp-custom-formats '("<%Y-%m-%d %a>" . "<%Y-%m-%d %a %H:%M>"))
;;set the org babel languages
(org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (java .t)
        (shell . t)
        (calc . t)
        (latex . t)
        (plantuml . t)))


;; Speeding Up Agendas, see https://orgmode.org/manual/Speeding-Up-Your-Agendas.html
(setq org-agenda-dim-blocked-tasks nil)
(setq org-agenda-inhibit-startup t)
(setq org-agenda-use-tag-inheritance nil)


;;------Clocking Work Time------
;;;disable because of the slow init time
;; (setq org-clock-persist 'history)
;; (org-clock-persistence-insinuate)
(setq org-clock-into-drawer "CLOCKLOG")
;;------Clocking Work Time------


;;------Effort Estimates------
(setq org-global-properties '(("Effort_ALL". "0:05 0:10 0:15 0:20 0:30 1:00 2:00 3:00 4:00 6:00 8:00 16:00")))
(setq org-columns-default-format "%6TODO %PRIORITY %38ITEM %8Effort(预计耗时/Estimated Effort）){:} %8CLOCKSUM_T(今日耗时/CLOCKSUM_T){:} %6CLOCKSUM(已耗时/CLOCKSUM){:} %TAGS")
;;------Effort Estimates------


;;---focus on yesterday, today and tomorrow---
;; org agenda: show last 1 days enties
(setq org-agenda-start-day "-1d")
(setq org-agenda-start-on-weekday nil)
(setq org-agenda-span '3)
;;---focus on yesterday, today and tomorrow---

;; see https://orgmode.org/manual/Deadlines-and-scheduling.html
(setq org-deadline-warning-days 30)

(setq org-plantuml-jar-path "~/.emacs.d/resources/plantuml.jar")
;;log closing item
(setq org-log-done 'note)
;;record an additional note together with the clock-out timestamp
(setq org-log-note-clock-out t)
;;see https://www.gnu.org/software/emacs/manual/html_node/org/Tracking-TODO-state-changes.html#fn-2
(setq org-log-into-drawer t)

;;------org-modules------
(setq org-modules '(org-id
                    org-habit                    
                    ol-bbdb
                    ol-bibtex
                    ol-docview
                    ol-gnus
                    ol-info
                    ol-irc
                    ol-mhe
                    ol-rmail
                    ol-w3m))
;;org-habit
(setq org-habit-graph-column 80)
(setq org-habit-show-habits-only-for-today nil)
;;------org-modules------

;;Ignore section-numbers when export to other files
(setq org-export-with-section-numbers nil)
;;; https://emacs.stackexchange.com/questions/17796/emacs-tea-time-is-supposed-to-be-integrated-in-org-mode-but-apparently-its-no/17849#17849
;;; https://emacs.stackexchange.com/questions/34746/how-to-get-an-audible-feedback-when-the-current-task-is-overrun/34750
;;(setq org-clock-sound "~/.emacs.d/alarm.wav")
(setq org-html-preamble-format '(("en" "<a class=\"a_1\" href=\"\\\">首页</a><a class=\"a_none\">需求决定一切，一切问题都是需求问题</a>")))
(setq org-html-postamble t)
(setq org-html-postamble-format '(("en" "<p class=\"creator\">Generated by %c</p>")))

(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

;;avoid 'Evaluate this plantuml code block on your system? (y or n) y'
(setq org-confirm-babel-evaluate nil)

;;priority settings
(setq org-highest-priority ?A)
(setq org-lowest-priority ?D)
(setq org-default-priority ?D)

;; org-id
(setq org-id-link-to-org-use-id t)
;; see https://stackoverflow.com/questions/13340616/assign-ids-to-every-entry-in-org-mode
(defun my/org-add-ids-to-headlines-in-file ()
  "Add ID properties to all headlines in the current file which
do not already have one."
  (interactive)
  (org-map-entries 'org-id-get-create))
;; (add-hook 'org-mode-hook
;;           (lambda ()
;;             (add-hook 'before-save-hook 'my/org-add-ids-to-headlines-in-file nil 'local)))

;;------customize the org-structure-template-alist------
;; I prefer a new line between the begin and end markers
(setq org-structure-template-alist
  '(("a" . "export ascii\n")
    ("c" . "center\n")
    ("C" . "comment\n")
    ("e" . "example\n")
    ("E" . "export")
    ("h" . "export html\n")
    ("l" . "export latex\n")
    ("q" . "quote\n")
    ("s" . "src")
    ("v" . "verse\n")
    ("j" . "json\n")))
;; add new elements to org-structure-template-alist
(add-to-list 'org-structure-template-alist '("b" . "src bash :results verbatim\n"))
(add-to-list 'org-structure-template-alist '("S" . "src sh\n"))
(add-to-list 'org-structure-template-alist '("m" . "src markdown\n"))
;;------customize the org-structure-template-alist------

;;------indent config------
;; disable auto-indent lines under headline when demoting headings
(setq org-adapt-indentation 'headline-data)
;; do not make RET to indent
(add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))
;;------indent config------

;;------org-goto config------
(setq org-goto-interface 'outline-path-completionp)
(setq org-outline-path-complete-in-steps nil)
;;------org-goto config------

(provide 'init-org)

